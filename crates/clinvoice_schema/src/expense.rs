mod display;
mod exchangeable;
mod restorable_serde;

use clinvoice_finance::Money;
#[cfg(feature = "serde_support")]
use serde::{Deserialize, Serialize};

use super::Id;

/// Some item or service which a [client](super::Organization)'s money was spent to acquire [while
/// working](super::Timesheet).
///
/// # Examples
///
/// ```rust
/// use clinvoice_schema::{Currency, Expense, Id, Money};
///
/// let _ = Expense {
///   id: 0, // NOTE: you normally want to avoid assigning an arbitrary ID like this
///   category: "Food".into(),
///   cost: Money::new(44_99, 2, Currency::Usd),
///   description: "2 №9s, a №9 large, a №6 w/ extra dip, 2 №45s (one with cheese), and a large soda".into(),
///   timesheet_id: 5,
/// };
/// ```
#[cfg_attr(feature = "serde_support", derive(Deserialize, Serialize))]
#[derive(Clone, Debug, Default, Eq, Hash, Ord, PartialEq, PartialOrd)]
pub struct Expense
{
	/// The reference number of this [`Expense`], which is unique among all [`Expense`]s.
	///
	/// Should be generated by a database, and never altered once assigned.
	pub id: Id,

	/// What broad type of [`Expense`] this is (e.g. "Travel"). Should be formally codified by the
	/// [`Organization`](super::Organization) using CLInvoice.
	pub category: String,

	/// The amount of [`Money`] that this [`Expense`] cost.
	pub cost: Money,

	/// A specific description of what this [`Expense`] is (e.g. "Uber ride from Airport").
	pub description: String,

	/// The [`Id`] of the [`Timesheet`] that this [`Expense`] is associated with.
	#[cfg_attr(feature = "serde_support", serde(skip))]
	pub timesheet_id: Id,
}
