mod display;
mod restorable_serde;

#[cfg(feature = "serde_support")]
use serde::{Deserialize, Serialize};

use super::Id;

/// A person who has been employed by the [`Organization`][organization] which uses
/// CLInvoice.
///
/// The [`Organization`][organization] that the [`Employee`] works for is not stored in the entity, as the
/// [`Organization`][organization] using CLInvoice is configured elsewhere and referenced as necessary.
///
/// [organization]: super::Organization
#[cfg_attr(feature = "serde_support", derive(Deserialize, Serialize))]
#[derive(Clone, Default, Debug, Eq, Hash, Ord, PartialEq, PartialOrd)]
pub struct Employee
{
	/// The reference number of this [`Employee`], which is unique among all [`Employee`]s.
	///
	/// Should be generated by a database, and never altered once assigned.
	#[cfg_attr(feature = "serde_support", serde(skip))]
	pub id: Id,

	/// The name of the [`Employee`].
	pub name: String,

	/// The operating status of the [`Employee`] within their [`Organization`][organization].
	///
	/// Setting this field to "Not employed", or "Ex-employee" is a viable way to archive
	/// an [`Employee`], while noting that they are no longer with the [`Organization`][organization].
	///
	/// [organization]: super::Organization
	pub status: String,

	/// The [`Employee`]'s title in the company, e.g. "CEO" or "Media Manager".
	pub title: String,
}
